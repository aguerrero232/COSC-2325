Microsoft (R) Macro Assembler Version 6.11		    10/25/18 14:28:29
NFORMAT.ASM						     Page 1 - 1



				;------------------------------------------------------------------------------------------
				; NFORMAT.ASM
				;
				;       ASM code for printing *NUMBERS* in a given base (2-16)
				;
				; This code is pretty complex, but a good example of complex, understandable code that students
				; should STUDY (that means READ AND KEEP RE-READING 'TIL A GLIMMER OF UNDERSTANDING OCCURS!) 
				;
				; After understanding, students should be able to modify code to do a few other things, 
				; like... 
				;       centered field output; 
				;       right padding and/or left justified output;
				;       leading zero's perhaps
				;       user-specifiable fill character (instead of ' ')
				;       Seperating commas/bars (i.e., "131,991,999" or "0000_0010_1000_1111")
				; 
				; And for the brave, after major reading of later MASM documentation
				; on directive and features which improve/automate parameter passing,
				; a good change is to use new-style MASM parameter handling in the
				; FORMAT_NUMBER procedure.
				;------------------------------------------------------------------------------------------


				;------------------------------------------------------------------------------------------
				; Separately assembled module requires assembler directives to specify the model, cpu, etc
				; but *does not* have a .STACK directive - its stack must be provided in another module

				.MODEL SMALL            ; Assembler directive specifying the segment model for the generated code
				.386                    ; Assembler directive limiting us to instructions supported by 80386 CPU



				;------------------------------------------------------------------------------------------
				; VERY COMPLEX ROUTINE... Convert AX to STRING, in A GIVEN BASE (2-16, not validated), 
				; terminated with '$' for use with DOS print ASCII$ (AH=9) service, right justified,
				; in a given width, left-padded with ' ' FILL CHARACTER...
				;
				; INPUT STACK ON ENTRY:
				;       [BP+12] FIELD_WIDTH (Desired formatted string width. If output < FIELD_WIDTH, 
				;                  conversion is RIGHT justified, left-padded with BLANKS
				;       [BP+10] BASE (numeric radix, 2-16, NOT VALIDATED!)  
				;       [BP+8]  NUMBER (number to convert)
				;       [BP+6]  BUF_WIDTH (Max. buffer storage, in bytes)
				;       [BP+4]  STRING_BUFFER (String storage buffer address)
				;       [BP+2]  RETURN_ADDRESS
				; SP--> [BP+0]  BP (see 1st two lines of the procedure)
				;
				; CALLING CONVENTION:
				;       
				;       FORMAT_NUMBER( DS:mem16 STRING_BUFFER, imm16 BUF_WIDTH, imm16 NUMBER, imm16 BASE, imm16 FIELD_WIDTH )
				;               
				;               Parameter passing (C-standard) order right-to-left
				;               Parameter removed from stack BEFORE return (ASM/Pascal convention)
				;              
				; Example:
				;       BUFFER: [ffffffdddd]
				;               [0123456789]
				;               Shown here is FIELD_WIDTH=10, with a 4 digit result right justified
				;               Leftmost character always at BUFFER[0] (string
				;
				;
				;       FORMAT_NUMBER( buffer, 10, 2937, 10, 6 );       // 2937 in base-10, 6 char field
				;       buffer: [  2937$???]
				;       index->  0123456789
				;
				;       FORMAT_NUMBER( buffer, 10, 0xFACE, 16, 3 );       // 2937 in base-10, 6 char field
				;       buffer: [FACE$     ]            ; conversion > field width doesn't truncate
				;       index->  0123456789
				;

 0000				.CODE   ; FORMAT_NUMBER belong in .CODE segment

 0000				FORMAT_NUMBER   PROC

 0000  55			        PUSH    BP                      ; Standard "prologue" code needed to address 
 0001  8B EC			        MOV     BP, SP                  ; function parameters passed on the stack
				        ;SUB     BP, nnn                ; often followed by this to reserve nnn bytes
				                                        ; for local variables
				                                        

				        ; To be really nice to the caller, PUSHA/PUSHF saves all used registers
				        ; *AND* - perhaps more importantly - the flags at the moment of entry.
 0003  60			        PUSHA                           
 0004  9C			        PUSHF

				        
				        ; (1) successive division to get digits, using base and pushing each digit on stack.
				        
				        ; digit_counter = 0
				        ; save "end-of-digits" marker (-1) on the stack
				        ; do {
				        ;    digit_val = number % base;
				        ;    number = number / base;
				        ;    save (push) char_digit on stack
				        ;    digit_counter++
				        ; } while ( number != 0 );

 0005  BB 0000			        MOV     BX, 0                   ; BX = counter for number of digits
 0008  8B 46 08			        MOV     AX, [BP+8]              ; AX = number
 000B  8B 4E 0A			        MOV     CX, [BP+10]             ; CX = Base (of which only low byte CL is used)
 000E  BA FFFF			        MOV     DX, 0FFFFh              ; Special marker (-1) that CAN'T be a digit
 0011  52			        PUSH    DX                      ; pushed onto stack to indicate "end of digits"
 0012				_DO:
 0012  BA 0000			        MOV     DX, 0                   ; DX:AX is DWORD, with DX=0 so only the number in AX of interest.
 0015  F7 F1			        DIV     CX                      ; dword/word division results are :  AX=quotient, DX=remainder
 0017  52			        PUSH    DX                      ; save remainder for later
 0018  43			        INC     BX                      ; Digit counter increment
 0019  85 C0			        TEST    AX, AX
 001B  75 F5			        JNZ     _DO                     ; while ( AX is non-zero )
 001D				_WHILE:
				        
				        ; (1a) Successive division conversion complete, all digits (in binary) are stacked
				        ;      and BX exits loop as count of digits
				        ;      From this, compute number of left-padding spaces that need to be output
				        ;      before the digits.
				        
 001D  8B 7E 04			        MOV     DI, [BP+4]              ; Get address of digit character string storage buffer into DI
 0020  8B 4E 0C			        MOV     CX, [BP+12]             ; Get the FIELD_WIDTH
 0023  2B CB			        SUB     CX, BX                  ; PaddingLen = (FIELD_WIDTH - numberDigits)
				                                        ; CX = paddingLen = number of leading blanks needed
 0025  7E 0A			        JLE     DONE_LEFT_PADDING       ; If Padding is NEGATIVE, skip padding loop!                                        
				        
 0027  B0 20			        MOV     AL, ' '                 ; Keep BLANK in AL for fastest use
 0029				DO_LEFT_PADDING:
 0029  E3 06			        JCXZ    DONE_LEFT_PADDING
 002B  88 05			        MOV     BYTE PTR DS:[DI], AL    ; Store a leading-blank to string buffer, *DI++ = ' ';
 002D  47			        INC     DI
 002E  49			        DEC     CX
 002F  EB F8			        JMP     DO_LEFT_PADDING
 0031				DONE_LEFT_PADDING:                                        
				        
				        
				        ; (2) Successive division continued: Retrieve stacked digits :-)
				        ;
				        
 0031				_WHILE_DIGITS:   
 0031  58			        POP     AX                      ; Retrieve digit from stack
 0032  83 F8 FF			        CMP     AX, 0FFFFh              ; ? Special marker 'end-of-digits'?
 0035  74 0E			        JE      END_LOOP
				        
 0037  8B F0			        MOV     SI, AX                  ; To use digit as index for DIGITS array, must be in to index register
 0039  81 C6 004E R		        ADD     SI, OFFSET _CS_HEX_DIGITS  ; Compute address of DIGITS[SI], i.e.,  &DIGITS[SI],
				                                           ;       This explicit address compute is required because CS: override can't do CS:DIGITS[SI] 
 003D  2E: 8A 14		        MOV     DL, CS:[SI]             ; Get CHARACTER for the digit. This is equivalent to array usage DL = _CS_HEX_DIGITS[AX]
				        
 0040  88 15			        MOV     DS:[DI], DL             ; Store the 8-bit character to storage buffer
 0042  47			        INC     DI                      ; increment storage buffer address pointer
				                                        ; this is equivalent to C/C++ pointer op:   *DI++ = DL
 0043  EB EC			        JMP     _WHILE_DIGITS
 0045				END_LOOP:
				        
				        
				        ; RIGHT_PADDING would go here....
				        
				        
				        
				        ; (3) Exit digit character loop, DI points PAST last digit character
 0045  C6 05 24			        MOV     BYTE PTR DS:[DI], '$'   ; Terminate with '$' for use via DOS print ASCII$ string
				        
				        ; todo: Limit checks vs buffer width!!!


 0048  9D			        POPF
 0049  61			        POPA
				        
 004A  5D			        POP     BP              ; revert PUSH BP
 004B  C2 000A			        RET     10              ; Explicit removal 10-bytes (5 WORD parameters) from stack AFTER return


				        ; Weird usage: Put DATA in the CODE segment, which ensures we can get it even if DS is 
				        ; changed by the caller to some other segment.
 004E 30 31 32 33 34 35		        _CS_HEX_DIGITS  DB "0123456789ABCDEF"                    ; Array[16] digits, '0' .. 'F'
       36 37 38 39 41 42
       43 44 45 46
				                                                                 ; for usage as CS:_CS_HEX_DIGITS[0..15]

				        
 005E				FORMAT_NUMBER   ENDP


				END
				; Ahh... a separately assembled ASM module ALSO must end... with END :-)
Microsoft (R) Macro Assembler Version 6.11		    10/25/18 14:28:29
NFORMAT.ASM						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 0000	  Word	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	16 Bit	 005E	  Word	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

FORMAT_NUMBER  . . . . . . . . .	P Near	 0000	  _TEXT	Length= 005E Public
  _DO  . . . . . . . . . . . . .	L Near	 0012	  _TEXT	
  _WHILE . . . . . . . . . . . .	L Near	 001D	  _TEXT	
  DO_LEFT_PADDING  . . . . . . .	L Near	 0029	  _TEXT	
  DONE_LEFT_PADDING  . . . . . .	L Near	 0031	  _TEXT	
  _WHILE_DIGITS  . . . . . . . .	L Near	 0031	  _TEXT	
  END_LOOP . . . . . . . . . . .	L Near	 0045	  _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
_CS_HEX_DIGITS . . . . . . . . .	Byte	 004E	  _TEXT	

	   0 Warnings
	   0 Errors
